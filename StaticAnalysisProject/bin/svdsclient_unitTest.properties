#if the slice store implementation should use the shared access configuration [on/off]
client.slicestore.sharedaccess=off
#implementation classes for different type of slice store
client.slicestore.azure=sg.edu.nyp.sit.svds.client.filestore.impl.AzurePageBlobSliceStore
#client.slicestore.azure=sg.edu.nyp.sit.svds.client.filestore.impl.AzureBlockBlobSliceStore
client.slicestore.s3=sg.edu.nyp.sit.svds.client.filestore.impl.S3SliceStore
client.slicestore.restlet=sg.edu.nyp.sit.svds.client.filestore.impl.RestletSliceStore
#client.slicestore.sharedaccess.azure=sg.edu.nyp.sit.svds.client.filestore.impl.AzureSharedAccessBlockBlobSliceStore
client.slicestore.sharedaccess.azure=sg.edu.nyp.sit.svds.client.filestore.impl.AzureSharedAccessPageBlobSliceStore
client.slicestore.sharedaccess.s3=sg.edu.nyp.sit.svds.client.filestore.impl.S3SharedAccessSliceStore
client.slicestore.sharedaccess.restlet=sg.edu.nyp.sit.svds.client.filestore.impl.RestletSharedAccessSliceStore
#implementation class for restlet slice store for authentication between client - slice store
#even if authentication is turn off by slice store, this property still have to point to
#valid class
client.slicestore.restlet.authentication=sg.edu.nyp.sit.svds.client.filestore.impl.RestletSliceStoreAuthenticationByKey
###################################################################################
#implementation of the virtual disk
client.virtualdisk=sg.edu.nyp.sit.pvfs.virtualdisk.dokan.VirtualFS
#used when the client mounts a virtual disk in SVDS client mode, it must have a namespace to use (which acts as the virtual disk label)
#if the client mode is PVFS, then the namespace is retrieved from the mobile
client.virtualdisk.namespace=urn:sit.nyp.edu.sg
###################################################################################
#implementation class for master - client authentication, if none is needed, set to "none"
#client.master.authentication=sg.edu.nyp.sit.svds.client.master.impl.MasterAuthenticationByLDAP
#client.master.authentication=sg.edu.nyp.sit.svds.client.master.impl.MasterAuthenticationByToken
client.master.authentication=none
client.master.bluetooth.file=sg.edu.nyp.sit.svds.client.master.impl.BluetoothMasterFileTable
client.master.bluetooth.namespace=sg.edu.nyp.sit.svds.client.master.impl.BluetoothMasterNamespaceTable
client.master.rest.file=sg.edu.nyp.sit.svds.client.master.impl.RestletMasterFileTable
client.master.rest.namespace=sg.edu.nyp.sit.svds.client.master.impl.RestletMasterNamespaceTable
client.master.proxy.file=sg.edu.nyp.sit.svds.client.master.impl.ProxyMasterFileTable
client.master.proxy.namespace=sg.edu.nyp.sit.svds.client.master.impl.ProxyMasterNamespaceTable
#following values must exist if connection protocl is http or https
#master server location url for client to connect to
client.master.rest.file.host=localhost
client.master.rest.namespace.host=localhost
client.master.rest.file.port=9010
client.master.rest.namespace.port=9011
client.master.rest.file.connector=http
client.master.rest.namespace.connector=http
client.master.proxy.host=localhost
client.master.proxy.port=6010
client.master.proxy.connector=http
#if connect by ssl(https value in client.master.rest.file.connector or client.master.proxy.file.connector property), 
#must specify the properties below
#file must exist in the classpath or is an absolute path
client.master.truststore=
client.master.truststorepwd=moeifssl
client.master.truststoretype=jks
###################################################################################
#file lock interval refresher in seconds (def 300)
file.lock.interval=300
#block size of slices in bytes
file.slice.blkSize=102400
#interval to determine if the slice should be read again (in seconds)
file.slice.interval=300
#option to turn file slice checksum feature on or off
file.slice.checksum=on
#to generate the key hash for the checksum feature using a secure random algorithm
file.random.algorithm=SHA1PRNG
#size of the key hash in bytes
file.random.size=20
###################################################################################
#storage and retrival mode that the client support (0-non-stream, 1-stream, 2-both)
#Only used in SVDS, in PVFS, the mode is always both because no segments are created in 
#streaming mode (when a block write fail, whole slice is discarded) so when the user 
#wants to open a file to write in streaming mode, output stream will check if the 
#no of existing slices is the min required slices to combine to get back ori data; 
#if yes then it will automatically goes into non-streaming mode so that the entire 
#file is read and all slices will be generated again  
client.file.mode=2
#mode that the client runs in (PVFS or SVDS)
client.mode=SVDS