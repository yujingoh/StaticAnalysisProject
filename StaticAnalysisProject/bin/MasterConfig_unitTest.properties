#directory containing the path to image and log files
master.directory=.
master.file.port=9010
master.namespace.port=9011
#if don intend to start maintainence, use 0
master.maintainence.port=0
###################################################################################
#length of time (in seconds, def 300) to keep the lock of a file for a user
file.lock.interval=300
#length of time (in seconds) to check the slice stores registered if they are alive
#mainly for slice stores that are not restlet; as restlet slice store will
#will ping back in fixed interval
slicestore.check.interval=900
###################################################################################
#def memory (in bytes) assigned to a namespace during registeration if none 
#is provided
namespace.def.memory=104857600
###################################################################################
#slice store key generation by the master when slice store is started with
#request verification is on
#in bytes
slicestore.random.size=20
slicestore.random.algorithm=SHA1PRNG
#slice store access url time limit (in minutes) for azure and S3 impl only
slicestore.accessurl.limit=60
###################################################################################
#implementation classes for different types of slice store
#only azure and restlet implementation is workable
slicestore.azure=sg.edu.nyp.sit.svds.master.filestore.impl.AzureSliceStore
slicestore.s3=sg.edu.nyp.sit.svds.master.filestore.impl.S3SliceStore
slicestore.restlet=sg.edu.nyp.sit.svds.master.filestore.impl.RestletSliceStore
#implementation class for master - restlet slice store authentication, to turn
#on or off depend on the slice store, this prob must point to a valid class
slicestore.restlet.authentication=sg.edu.nyp.sit.svds.master.filestore.impl.RestletSliceStoreAuthenticationByKey
#if the access keys of the slice stores should be return to the client
#if not the client have to use shared access implementation of the slice store
slicestore.sharedaccess=off
###################################################################################
#master - client authentication for file operations
#implementation class for the authentication, if none is need, use "none"
client.file.authentication=none
#if the connection is using ssl, ensure the certificate exist in the ssl truststore prop
client.file.authentication.ldap.ssl=on
client.file.authentication.ldap.server=172.20.134.165\:636
client.file.authentication.ldap.domain=cn\=users,dc\=cloud,dc\=nyp,dc\=edu,dc\=sg
###################################################################################
#for debugging or runing test
#in seconds
debug.delay=2
###################################################################################
#ssl properties
#file must exist in the classpath or is an absolute path
#if the keystore is not needed (cos not using SSL), then set the value to empty "ssl.keystore="
ssl.keystore=moeifks_local.jks
ssl.keystorepwd=moeifssl
ssl.keypwd=moeifssl
ssl.keystoretype=jks
#file must exist in the classpath or is an absolute path
#if the truststore is not needed (cos not using SSL), then set the value to empty "ssl.truststore="
ssl.truststore=moeifks_localClient.jks
ssl.truststorepwd=moeifssl
ssl.truststoretype=jks
master.file.ssl=off
master.file.ssl.address=localhost
master.namespace.ssl=off
master.namespace.ssl.address=localhost
master.namespace.ssl.clientauth=on
master.maintainence.ssl=off
master.maintainence.ssl.address=localhost
master.maintainence.ssl.clientauth=on